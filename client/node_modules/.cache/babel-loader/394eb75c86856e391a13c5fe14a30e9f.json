{"ast":null,"code":"const {\n  getAuthTokens\n} = require('.');\n\nconst fetchInstance = async (url, fetchInit) => {\n  try {\n    let newFetchInit = undefined;\n\n    if (fetchInit) {\n      newFetchInit = { ...fetchInit\n      };\n\n      if (newFetchInit.headers) {\n        newFetchInit.headers = { ...newFetchInit.headers,\n          Authorization: `Bearer ${getAuthTokens().token}`\n        };\n      } else {\n        newFetchInit['headers'] = {\n          Authorization: `Bearer ${getAuthTokens().token}`\n        };\n      }\n    } else {\n      newFetchInit = {\n        headers: {\n          Authorization: `Bearer ${getAuthTokens().token}`\n        }\n      };\n    }\n\n    return await new Promise((resolve, reject) => {\n      return fetch(url, newFetchInit).then(data => {\n        resolve(data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  } catch (error) {\n    console.log(JSON.stringify(error)); // if error and error status = 401 try refresh, if it fails return error\n\n    fetch('http://localhost:3001/login/refresh', {\n      body: JSON.stringify({\n        refreshToken: getAuthTokens().refreshToken\n      })\n    });\n  }\n};\n\nexport default fetchInstance;","map":{"version":3,"names":["getAuthTokens","require","fetchInstance","url","fetchInit","newFetchInit","undefined","headers","Authorization","token","Promise","resolve","reject","fetch","then","data","catch","err","error","console","log","JSON","stringify","body","refreshToken"],"sources":["C:/Users/pc/Desktop/balkon-project/client/src/redux/utils/fetchInstance.js"],"sourcesContent":["const { getAuthTokens } = require('.');\r\n\r\nconst fetchInstance = async (url, fetchInit) => {\r\n  try {\r\n    let newFetchInit = undefined;\r\n    if (fetchInit) {\r\n      newFetchInit = { ...fetchInit };\r\n      if (newFetchInit.headers) {\r\n        newFetchInit.headers = {\r\n          ...newFetchInit.headers,\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        };\r\n      } else {\r\n        newFetchInit['headers'] = {\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        };\r\n      }\r\n    } else {\r\n      newFetchInit = {\r\n        headers: {\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        },\r\n      };\r\n    }\r\n\r\n    return await new Promise((resolve, reject) => {\r\n      return fetch(url, newFetchInit)\r\n        .then((data) => {\r\n          resolve(data);\r\n        })\r\n        .catch((err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  } catch (error) {\r\n    console.log(JSON.stringify(error));\r\n    // if error and error status = 401 try refresh, if it fails return error\r\n    fetch('http://localhost:3001/login/refresh', {\r\n      body: JSON.stringify({ refreshToken: getAuthTokens().refreshToken }),\r\n    });\r\n  }\r\n};\r\n\r\nexport default fetchInstance;\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,GAAD,CAAjC;;AAEA,MAAMC,aAAa,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;EAC9C,IAAI;IACF,IAAIC,YAAY,GAAGC,SAAnB;;IACA,IAAIF,SAAJ,EAAe;MACbC,YAAY,GAAG,EAAE,GAAGD;MAAL,CAAf;;MACA,IAAIC,YAAY,CAACE,OAAjB,EAA0B;QACxBF,YAAY,CAACE,OAAb,GAAuB,EACrB,GAAGF,YAAY,CAACE,OADK;UAErBC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QAF1B,CAAvB;MAID,CALD,MAKO;QACLJ,YAAY,CAAC,SAAD,CAAZ,GAA0B;UACxBG,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QADvB,CAA1B;MAGD;IACF,CAZD,MAYO;MACLJ,YAAY,GAAG;QACbE,OAAO,EAAE;UACPC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QADxC;MADI,CAAf;IAKD;;IAED,OAAO,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC5C,OAAOC,KAAK,CAACV,GAAD,EAAME,YAAN,CAAL,CACJS,IADI,CACEC,IAAD,IAAU;QACdJ,OAAO,CAACI,IAAD,CAAP;MACD,CAHI,EAIJC,KAJI,CAIGC,GAAD,IAAS;QACdL,MAAM,CAACK,GAAD,CAAN;MACD,CANI,CAAP;IAOD,CARY,CAAb;EASD,CA/BD,CA+BE,OAAOC,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAZ,EADc,CAEd;;IACAL,KAAK,CAAC,qCAAD,EAAwC;MAC3CU,IAAI,EAAEF,IAAI,CAACC,SAAL,CAAe;QAAEE,YAAY,EAAExB,aAAa,GAAGwB;MAAhC,CAAf;IADqC,CAAxC,CAAL;EAGD;AACF,CAvCD;;AAyCA,eAAetB,aAAf"},"metadata":{},"sourceType":"module"}