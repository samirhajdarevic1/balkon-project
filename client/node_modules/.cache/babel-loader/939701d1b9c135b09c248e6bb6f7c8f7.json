{"ast":null,"code":"const {\n  getAuthTokens\n} = require('.');\n\nconst fetchInstance = async (url, fetchInit) => {\n  let newFetchInit = undefined;\n\n  if (fetchInit) {\n    newFetchInit = { ...fetchInit\n    };\n\n    if (newFetchInit.headers) {\n      newFetchInit.headers = { ...newFetchInit.headers,\n        Authorization: `Bearer ${getAuthTokens().token}`\n      };\n    } else {\n      newFetchInit['headers'] = {\n        Authorization: `Bearer ${getAuthTokens().token}`\n      };\n    }\n  } else {\n    newFetchInit = {\n      headers: {\n        Authorization: `Bearer ${getAuthTokens().token}`\n      }\n    };\n  }\n\n  let response = await fetch(url, newFetchInit);\n  console.log(response, !response.ok, response.status, response.status === 401);\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      console.log('new fetch');\n      response = await fetch('http://localhost:3001/login/refresh', {\n        method: 'POST',\n        body: JSON.stringify({\n          refreshToken: getAuthTokens().refreshToken\n        })\n      });\n    }\n\n    throw new Error(response.statusText);\n  }\n\n  if (!response.ok) {}\n\n  console.log(response);\n};\n\nexport default fetchInstance;","map":{"version":3,"names":["getAuthTokens","require","fetchInstance","url","fetchInit","newFetchInit","undefined","headers","Authorization","token","response","fetch","console","log","ok","status","method","body","JSON","stringify","refreshToken","Error","statusText"],"sources":["C:/Users/pc/Desktop/balkon-project/client/src/redux/utils/fetchInstance.js"],"sourcesContent":["const { getAuthTokens } = require('.');\r\n\r\nconst fetchInstance = async (url, fetchInit) => {\r\n  let newFetchInit = undefined;\r\n  if (fetchInit) {\r\n    newFetchInit = { ...fetchInit };\r\n    if (newFetchInit.headers) {\r\n      newFetchInit.headers = {\r\n        ...newFetchInit.headers,\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      };\r\n    } else {\r\n      newFetchInit['headers'] = {\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      };\r\n    }\r\n  } else {\r\n    newFetchInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  let response = await fetch(url, newFetchInit);\r\n  console.log(response, !response.ok, response.status, response.status === 401);\r\n\r\n  if (!response.ok) {\r\n    if (response.status === 401) {\r\n      console.log('new fetch');\r\n      response = await fetch('http://localhost:3001/login/refresh', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ refreshToken: getAuthTokens().refreshToken }),\r\n      });\r\n    }\r\n    throw new Error(response.statusText);\r\n  }\r\n\r\n  if (!response.ok) {\r\n  }\r\n  console.log(response);\r\n};\r\n\r\nexport default fetchInstance;\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,GAAD,CAAjC;;AAEA,MAAMC,aAAa,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;EAC9C,IAAIC,YAAY,GAAGC,SAAnB;;EACA,IAAIF,SAAJ,EAAe;IACbC,YAAY,GAAG,EAAE,GAAGD;IAAL,CAAf;;IACA,IAAIC,YAAY,CAACE,OAAjB,EAA0B;MACxBF,YAAY,CAACE,OAAb,GAAuB,EACrB,GAAGF,YAAY,CAACE,OADK;QAErBC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MAF1B,CAAvB;IAID,CALD,MAKO;MACLJ,YAAY,CAAC,SAAD,CAAZ,GAA0B;QACxBG,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MADvB,CAA1B;IAGD;EACF,CAZD,MAYO;IACLJ,YAAY,GAAG;MACbE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MADxC;IADI,CAAf;EAKD;;EAED,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAME,YAAN,CAA1B;EACAO,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsB,CAACA,QAAQ,CAACI,EAAhC,EAAoCJ,QAAQ,CAACK,MAA7C,EAAqDL,QAAQ,CAACK,MAAT,KAAoB,GAAzE;;EAEA,IAAI,CAACL,QAAQ,CAACI,EAAd,EAAkB;IAChB,IAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;MAC3BH,OAAO,CAACC,GAAR,CAAY,WAAZ;MACAH,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,EAAwC;QAC5DK,MAAM,EAAE,MADoD;QAE5DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAEC,YAAY,EAAEpB,aAAa,GAAGoB;QAAhC,CAAf;MAFsD,CAAxC,CAAtB;IAID;;IACD,MAAM,IAAIC,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAN;EACD;;EAED,IAAI,CAACZ,QAAQ,CAACI,EAAd,EAAkB,CACjB;;EACDF,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,CAvCD;;AAyCA,eAAeR,aAAf"},"metadata":{},"sourceType":"module"}