{"ast":null,"code":"const {\n  getAuthTokens\n} = require('.');\n\nconst fetchInstance = async (url, fetchInit) => {\n  try {\n    let newFetchInit = undefined;\n\n    if (fetchInit) {\n      newFetchInit = { ...fetchInit\n      };\n\n      if (newFetchInit.headers) {\n        newFetchInit.headers = { ...newFetchInit.headers,\n          Authorization: `Bearer ${getAuthTokens().token}`\n        };\n      } else {\n        newFetchInit['headers'] = {\n          Authorization: `Bearer ${getAuthTokens().token}`\n        };\n      }\n    } else {\n      newFetchInit = {\n        headers: {\n          Authorization: `Bearer ${getAuthTokens().token}`\n        }\n      };\n    }\n\n    const response = await fetch(url, newFetchInit);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        const authResponse = await fetch('http://localhost:3001/login/refresh', {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            refreshToken: getAuthTokens().refreshToken\n          })\n        });\n\n        if (!authResponse.ok) {\n          throw new Error(response.statusText);\n        } else {\n          const result = await authResponse.json();\n          localStorage.setItem('token', result.data.accessToken);\n          localStorage.setItem('refreshToken', result.data.refreshToken);\n        }\n      }\n\n      throw new Error(response.statusText);\n    }\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default fetchInstance;","map":{"version":3,"names":["getAuthTokens","require","fetchInstance","url","fetchInit","newFetchInit","undefined","headers","Authorization","token","response","fetch","ok","status","authResponse","method","Accept","body","JSON","stringify","refreshToken","Error","statusText","result","json","localStorage","setItem","data","accessToken","error"],"sources":["C:/Users/pc/Desktop/balkon-project/client/src/redux/utils/fetchInstance.js"],"sourcesContent":["const { getAuthTokens } = require('.');\r\n\r\nconst fetchInstance = async (url, fetchInit) => {\r\n  try {\r\n    let newFetchInit = undefined;\r\n    if (fetchInit) {\r\n      newFetchInit = { ...fetchInit };\r\n      if (newFetchInit.headers) {\r\n        newFetchInit.headers = {\r\n          ...newFetchInit.headers,\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        };\r\n      } else {\r\n        newFetchInit['headers'] = {\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        };\r\n      }\r\n    } else {\r\n      newFetchInit = {\r\n        headers: {\r\n          Authorization: `Bearer ${getAuthTokens().token}`,\r\n        },\r\n      };\r\n    }\r\n\r\n    const response = await fetch(url, newFetchInit);\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        const authResponse = await fetch(\r\n          'http://localhost:3001/login/refresh',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              refreshToken: getAuthTokens().refreshToken,\r\n            }),\r\n          }\r\n        );\r\n\r\n        if (!authResponse.ok) {\r\n          throw new Error(response.statusText);\r\n        } else {\r\n          const result = await authResponse.json();\r\n          localStorage.setItem('token', result.data.accessToken);\r\n          localStorage.setItem('refreshToken', result.data.refreshToken);\r\n        }\r\n      }\r\n\r\n      throw new Error(response.statusText);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default fetchInstance;\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,GAAD,CAAjC;;AAEA,MAAMC,aAAa,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;EAC9C,IAAI;IACF,IAAIC,YAAY,GAAGC,SAAnB;;IACA,IAAIF,SAAJ,EAAe;MACbC,YAAY,GAAG,EAAE,GAAGD;MAAL,CAAf;;MACA,IAAIC,YAAY,CAACE,OAAjB,EAA0B;QACxBF,YAAY,CAACE,OAAb,GAAuB,EACrB,GAAGF,YAAY,CAACE,OADK;UAErBC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QAF1B,CAAvB;MAID,CALD,MAKO;QACLJ,YAAY,CAAC,SAAD,CAAZ,GAA0B;UACxBG,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QADvB,CAA1B;MAGD;IACF,CAZD,MAYO;MACLJ,YAAY,GAAG;QACbE,OAAO,EAAE;UACPC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;QADxC;MADI,CAAf;IAKD;;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAME,YAAN,CAA5B;;IAEA,IAAI,CAACK,QAAQ,CAACE,EAAd,EAAkB;MAChB,IAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;QAC3B,MAAMC,YAAY,GAAG,MAAMH,KAAK,CAC9B,qCAD8B,EAE9B;UACEI,MAAM,EAAE,MADV;UAEER,OAAO,EAAE;YACPS,MAAM,EAAE,kBADD;YAEP,gBAAgB;UAFT,CAFX;UAMEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;YACnBC,YAAY,EAAEpB,aAAa,GAAGoB;UADX,CAAf;QANR,CAF8B,CAAhC;;QAcA,IAAI,CAACN,YAAY,CAACF,EAAlB,EAAsB;UACpB,MAAM,IAAIS,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAN;QACD,CAFD,MAEO;UACL,MAAMC,MAAM,GAAG,MAAMT,YAAY,CAACU,IAAb,EAArB;UACAC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACI,IAAP,CAAYC,WAA1C;UACAH,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,MAAM,CAACI,IAAP,CAAYP,YAAjD;QACD;MACF;;MAED,MAAM,IAAIC,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAN;IACD;;IAED,IAAI,CAACZ,QAAQ,CAACE,EAAd,EAAkB;MAChB,MAAM,IAAIS,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAN;IACD;;IAED,OAAO,MAAMZ,QAAQ,CAACc,IAAT,EAAb;EACD,CAzDD,CAyDE,OAAOK,KAAP,EAAc;IACd,MAAMA,KAAN;EACD;AACF,CA7DD;;AA+DA,eAAe3B,aAAf"},"metadata":{},"sourceType":"module"}