{"ast":null,"code":"const {\n  getAuthTokens\n} = require('.');\n\nconst fetchInstance = async (url, fetchInit) => {\n  let newFetchInit = undefined;\n\n  if (fetchInit) {\n    newFetchInit = { ...fetchInit\n    };\n\n    if (newFetchInit.headers) {\n      newFetchInit.headers = { ...newFetchInit.headers,\n        Authorization: `Bearer ${getAuthTokens().token}`\n      };\n    } else {\n      newFetchInit['headers'] = {\n        Authorization: `Bearer ${getAuthTokens().token}`\n      };\n    }\n  } else {\n    newFetchInit = {\n      headers: {\n        Authorization: `Bearer ${getAuthTokens().token}`\n      }\n    };\n  }\n\n  const response = await fetch(url, newFetchInit);\n  console.log(response); // if error and error status = 401 try refresh, if it fails return error\n  // fetch('http://localhost:3001/login/refresh', {\n  //   body: JSON.stringify({ refreshToken: getAuthTokens().refreshToken }),\n  // });\n};\n\nexport default fetchInstance;","map":{"version":3,"names":["getAuthTokens","require","fetchInstance","url","fetchInit","newFetchInit","undefined","headers","Authorization","token","response","fetch","console","log"],"sources":["C:/Users/pc/Desktop/balkon-project/client/src/redux/utils/fetchInstance.js"],"sourcesContent":["const { getAuthTokens } = require('.');\r\n\r\nconst fetchInstance = async (url, fetchInit) => {\r\n  let newFetchInit = undefined;\r\n  if (fetchInit) {\r\n    newFetchInit = { ...fetchInit };\r\n    if (newFetchInit.headers) {\r\n      newFetchInit.headers = {\r\n        ...newFetchInit.headers,\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      };\r\n    } else {\r\n      newFetchInit['headers'] = {\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      };\r\n    }\r\n  } else {\r\n    newFetchInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${getAuthTokens().token}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  const response = await fetch(url, newFetchInit);\r\n\r\n  console.log(response);\r\n  // if error and error status = 401 try refresh, if it fails return error\r\n  // fetch('http://localhost:3001/login/refresh', {\r\n  //   body: JSON.stringify({ refreshToken: getAuthTokens().refreshToken }),\r\n  // });\r\n};\r\n\r\nexport default fetchInstance;\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,GAAD,CAAjC;;AAEA,MAAMC,aAAa,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;EAC9C,IAAIC,YAAY,GAAGC,SAAnB;;EACA,IAAIF,SAAJ,EAAe;IACbC,YAAY,GAAG,EAAE,GAAGD;IAAL,CAAf;;IACA,IAAIC,YAAY,CAACE,OAAjB,EAA0B;MACxBF,YAAY,CAACE,OAAb,GAAuB,EACrB,GAAGF,YAAY,CAACE,OADK;QAErBC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MAF1B,CAAvB;IAID,CALD,MAKO;MACLJ,YAAY,CAAC,SAAD,CAAZ,GAA0B;QACxBG,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MADvB,CAA1B;IAGD;EACF,CAZD,MAYO;IACLJ,YAAY,GAAG;MACbE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASR,aAAa,GAAGS,KAAM;MADxC;IADI,CAAf;EAKD;;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAME,YAAN,CAA5B;EAEAO,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAxB8C,CAyB9C;EACA;EACA;EACA;AACD,CA7BD;;AA+BA,eAAeR,aAAf"},"metadata":{},"sourceType":"module"}