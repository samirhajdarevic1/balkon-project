{"ast":null,"code":"import fetchInstance from '../utils/fetchInstance';\nimport { authUserTypes } from './types';\nexport const authUser = user => {\n  return async dispatch => {\n    try {\n      console.log(user);\n      dispatch({\n        type: authUserTypes.AUTH_USER_REQUEST\n      });\n      const result = await fetchInstance(`http://localhost:3001/login`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: `${user.ime}`,\n          password: `${user.password}`\n        })\n      });\n\n      if (result.accessToken) {\n        localStorage.setItem('token', result.accessToken);\n        localStorage.setItem('refreshToken', result.refreshToken);\n        alert('Login successful');\n        window.location.href = '/home';\n      } else {\n        alert('Please check your username and password');\n      }\n\n      dispatch({\n        type: authUserTypes.AUTH_USER_SUCCESS,\n        payload: result.data\n      });\n    } catch (error) {\n      dispatch({\n        type: authUserTypes.AUTH_USER_ERROR,\n        error: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["fetchInstance","authUserTypes","authUser","user","dispatch","console","log","type","AUTH_USER_REQUEST","result","method","headers","Accept","body","JSON","stringify","name","ime","password","accessToken","localStorage","setItem","refreshToken","alert","window","location","href","AUTH_USER_SUCCESS","payload","data","error","AUTH_USER_ERROR","message"],"sources":["C:/Users/pc/Desktop/balkon-project/client/src/redux/authUser/actions.js"],"sourcesContent":["import fetchInstance from '../utils/fetchInstance';\r\nimport { authUserTypes } from './types';\r\n\r\nexport const authUser = (user) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      console.log(user);\r\n      dispatch({ type: authUserTypes.AUTH_USER_REQUEST });\r\n      const result = await fetchInstance(`http://localhost:3001/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: `${user.ime}`,\r\n          password: `${user.password}`,\r\n        }),\r\n      });\r\n      if (result.accessToken) {\r\n        localStorage.setItem('token', result.accessToken);\r\n        localStorage.setItem('refreshToken', result.refreshToken);\r\n        alert('Login successful');\r\n        window.location.href = '/home';\r\n      } else {\r\n        alert('Please check your username and password');\r\n      }\r\n      dispatch({\r\n        type: authUserTypes.AUTH_USER_SUCCESS,\r\n        payload: result.data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: authUserTypes.AUTH_USER_ERROR,\r\n        error: error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,SAASC,aAAT,QAA8B,SAA9B;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU;EAChC,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAI;MACFC,OAAO,CAACC,GAAR,CAAYH,IAAZ;MACAC,QAAQ,CAAC;QAAEG,IAAI,EAAEN,aAAa,CAACO;MAAtB,CAAD,CAAR;MACA,MAAMC,MAAM,GAAG,MAAMT,aAAa,CAAE,6BAAF,EAAgC;QAChEU,MAAM,EAAE,MADwD;QAEhEC,OAAO,EAAE;UACPC,MAAM,EAAE,kBADD;UAEP,gBAAgB;QAFT,CAFuD;QAMhEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBC,IAAI,EAAG,GAAEb,IAAI,CAACc,GAAI,EADC;UAEnBC,QAAQ,EAAG,GAAEf,IAAI,CAACe,QAAS;QAFR,CAAf;MAN0D,CAAhC,CAAlC;;MAWA,IAAIT,MAAM,CAACU,WAAX,EAAwB;QACtBC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BZ,MAAM,CAACU,WAArC;QACAC,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCZ,MAAM,CAACa,YAA5C;QACAC,KAAK,CAAC,kBAAD,CAAL;QACAC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,OAAvB;MACD,CALD,MAKO;QACLH,KAAK,CAAC,yCAAD,CAAL;MACD;;MACDnB,QAAQ,CAAC;QACPG,IAAI,EAAEN,aAAa,CAAC0B,iBADb;QAEPC,OAAO,EAAEnB,MAAM,CAACoB;MAFT,CAAD,CAAR;IAID,CA1BD,CA0BE,OAAOC,KAAP,EAAc;MACd1B,QAAQ,CAAC;QACPG,IAAI,EAAEN,aAAa,CAAC8B,eADb;QAEPD,KAAK,EAAEA,KAAK,CAACE;MAFN,CAAD,CAAR;IAID;EACF,CAjCD;AAkCD,CAnCM"},"metadata":{},"sourceType":"module"}